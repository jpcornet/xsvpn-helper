#!/bin/bash

set -e

if [ $(id -u) -ne 0 ]; then
    echo Need root privs to delete stale TimeMachine directories
    exec sudo $0 "$@"
    exit -1
fi

currbacks=$(mktemp)
currdirs=$(mktemp)
diffdirs=$(mktemp)

is_disabled=false
usedir_pid=
cleanup_temp() {
    rm -f $currbacks $currdirs $diffdirs
    [ -n "$usedir_pid" ] && kill $usedir_pid
    $is_disabled && tmutil enable
}

error() {
    ret=$1
    shift
    printf %s\\n "$*"
    cleanup_temp
    exit $ret
}

usage() {
    echo "Usage:"
    echo
    echo "  tm-delete-stale [-1] [-c] [-d] [-w]"
    echo
    echo "Options:"
    echo "  -1   Only One stale backup to delete (default all)"
    echo "  -w   Do not Wait until backup is finished (by default, wait until running backup is done)"
    echo "  -d   do not Disable backups while deleting (by default, suspends new backups)"
    echo "  -c   Only Check if stale backups exist, and report them."
    exit 1
}

trap 'cleanup_temp' 0
trap 'error 1 "Interrupted"' 1 2 3 15

do_one=false
do_wait=true
do_disable=true
only_check=false
while getopts 1cdhw opt
do
    case "$opt" in
    1)  do_one=true;;
    c)  only_check=true
        do_disable=false;;
    d)  do_disable=false;;
    w)  do_wait=false;;
    h|?)    usage;;
    esac
done

echo Listing current backups...
tmutil listbackups -m > $currbacks || error 1 "Cannot list backups"
bkdir=$( dirname "$( head -1 $currbacks )" )
[ -d "$bkdir" ] || error 1 "Not a directory: $bkdir"

# make sure every backup is in bkdir
while read l
do
    dir2=$( dirname "$l" )
    if [ "$dir2" != "$bkdir" ]; then
        echo Error, backups in differing dirs. Compare $l
        head -1 $currbacks
        exit 1
    fi
done < $currbacks

hug_dir() {
    parent="$$"
    (
        cd "$1"
        while kill -0 $parent
        do
            sleep 10
        done
    ) &
    usedir_pid=$!
}

if $do_wait && tmutil status | grep -q 'Running = 1'; then
    echo "A backup is currently in progress, waiting for current backup to finish."
    # "use" the backup directory to prevent current backup from unmounting backup dir while we're running
    # cannot use $(hug_dir) for some reason, subprocess will not work. bash bug?
    hug_dir "$bkdir"
    while tmutil status | grep -q 'Running = 1' && sleep 30
    do
        echo -n .
    done
    echo
    # rescan current backups
    echo Rescanning current backups...
    tmutil listbackups -m > $currbacks || error 1 "Cannot list backups"
fi

if $do_disable && tmutil status | grep -q 'Running = 0'; then
    is_disabled=true
    tmutil disable
    # make sure there wasn't a race condition
    if tmutil status | grep -q 'Running = 1'; then
        echo -n "Uhoh, race condition, backup started while disabling automatic backups"
        tmutil stopbackup
        while tmutil status | grep -q 'Running = 1' && sleep 10
        do
            echo -n .
        done
        echo
    fi
elif ! $do_one; then
    echo Not disabling backups, so forcing to only delete one stale backup at most
    do_one=true
fi

echo Found $( wc -l < $currbacks ) current backups
echo Checking stale directories under backup directory $bkdir
# get list of directories in $bkdir
while read i
do
    case "$i" in
        [0-9][0-9][0-9][0-9]-[01][0-9]-[0-3][0-9]-[0-2][0-9][0-5][0-9][0-6][0-9])
            fulldir="$bkdir/$i"
            if [ -d "$fulldir" -a ! -L "$fulldir" ]; then
                printf %s\\n "$fulldir" >> $currdirs
            else
                echo Strange item in $bkdir: $i
            fi
            ;;
        [0-9][0-9][0-9][0-9]-[01][0-9]-[0-3][0-9]-[0-2][0-9][0-5][0-9][0-6][0-9].inProgress)
            echo Hmm... looks like a backup is already in progress.
            ;;
        Latest | . | .. | com.apple.TimeMachine.inheritance.plist)
            ;;
        *)
            echo Strange entry in $bkdir: $i
            ;;
    esac
done <<END_LS
$( ls -f "$bkdir" )
END_LS

# make sure every current backup is a directory
cat $currbacks $currdirs $currdirs | sort | uniq -u > $diffdirs
if [ -s $diffdirs ]; then
    echo Does not compute. There are backups present that are not found as a directory:
    while read d
    do
        ls -ld "$d"
    done <$diffdirs
    echo Aborting.
    exit -1
fi

# determine stale directories
cat $currbacks $currbacks $currdirs | sort | uniq -u > $diffdirs
if [ ! -s $diffdirs ]; then
    echo No stale TimeMachine directories
    exit 2
fi

# if backup phase is "ThinningPostBackup", then there will always be 1 "stale" directory
if tmutil status | egrep -q 'BackupPhase *= *ThinningPostBackup'; then
    echo Regular backup is thinning, always expect one stale backup
    is_thinning=true
else
    is_thinning=false
fi

# verify stale directories, there should not be dotfiles in the dirs
echo These stale directories exist:
declare -a delparams
count=0
while read staled
do
    ok_dir=empty
    while read f
    do
        case "$f" in
            .[!.]* | ..?*)
                ok_dir=false
                echo In stale dir $staled, bad entry $f
                ;;
            . | ..)
                ;;
            *)
                if [ "$ok_dir" == "empty" ]; then
                    ok_dir=true
                fi
        esac
    done <<END_LS
$( ls -f "$staled" )
END_LS
    if [ "$ok_dir" == "true" ]; then
        printf %s\\n "$staled"
    elif [ "$ok_dir" == "empty" ]; then
        echo Empty stale directory: $staled
    else
        echo This stale directory still contains dotfiles: $staled, skipping
        continue
    fi
    delparams=("${delparams[@]}" "$staled")
    count=$(( $count + 1 ))
done <$diffdirs

if [ $count -eq 0 ]; then
    error 0 "No deletable directories exist"
elif $is_thinning && [ $count -eq 1 ]; then
    error 0 "One stale directory, but backup is thinning. This is probably normal."
elif $is_thinning; then
    error 1 "Currently thinning, will not delete backups at the same time."
fi

if $do_one; then
    delparams=("${delparams[0]}")
    count=1
fi

if $only_check; then
    echo Would delete $count stale dirs: ${delparams[@]}
    exit $count
else
    echo Deleting $count stale dirs: ${delparams[@]}
    for x in "${delparams[@]}"; do
        tmutil delete -p "$x"
    done
fi
